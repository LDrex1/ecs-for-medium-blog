name: terrafrom validation, intergration and deployment
on:
  pull_request:
    branches: [staging]
env:
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      WORKDIR: >-
        ${{ github.ref_name == 'staging' && 'main/eu-west-2/staging' ||
        github.ref_name == 'main'    && 'main/eu-west-2/prod'    ||
        ''}}
    defaults:
      run:
        shell: bash
      #  working-directory:
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up terraform on the runner
        uses: hashicorp/setup-terrafrom@v2

      - name: Initialize terraform
        uses: terraform init

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{steps.plan.outputs.stdout}}"
        with:
          script: |
            const output = #### Terraform Format and Style \${{steps.fmt.outcome}}\
            #### Terraform Validation \${{steps.validate.outcome}}\
            #### Terraform Plan \${{steps.plan.outome}}\

            <details><summary>Show Plan</summary>
            \\\\n
            ${{process.env.PLAN}}
            \\\\n
            </details>
            *Pushed by @${{github.actor}}, Action: \${{github.event_name}}\*;

            github.rest.issues.createComment{{
            issue_number: context.issue.number
            owner: context.repo.owner
            repo: context.repo.repo
            body: output
            }}

      - name: Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
